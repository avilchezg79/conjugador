# -*- coding: utf-8 -*-
"""Tarea 4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B46yYF0qCMIhgMMkuDrF_MAmYTQTIrCw

Lea las páginas 82-89 y 160-165 del libro de Quechua Chanca de Zariquiey y
Córdova.

Escriba un código de Python que reciba un verbo en infinitivo, tiyay (vivir), y lo conjugue en presente, ñuqa tiya-ni (yo vivo), y en pasado, ñuqa tiya-rqa-ni (yo vivía).

Hay muchas formas de implementar este problema en Python. Trate de dividir el
problema en muchos problemas simples. Trate de usar funciones.

Considere las tres formas de presente, las dos formas de pasado y todos los
pronombres.
"""

import pandas as pd

tiyay = pd.ExcelFile('tiyay.xlsx')

tiyay

## Diccionario para los pronombres
## Creo un ciclo for que lea solo la hoja en la que coloqué los pronombres y la convierta a diccionario

P = {}

for hoja in tiyay.sheet_names:
  pf = pd.read_excel('tiyay.xlsx', sheet_name = "pronombres")
  pf = pf.set_index(['Unnamed: 0'])
  p = pf.to_dict()
  P[hoja] = p

P

## Diccionario para los sufijos

D = {}

for hoja in tiyay.sheet_names:
  df = pd.read_excel('tiyay.xlsx', sheet_name = hoja)
  df = df.set_index(['Unnamed: 0'])
  d = df.to_dict()
  D[hoja] = d

D

## Función para conjugar la base
## Se llegará al sufijo "abriendo" las distintas entradas en el orden según el que aparecen en el diccionario (tiempo > nro > persona)

base = 'tiya-'
def conjuga(base, tiempo, numero, persona):
    return base + D[tiempo][numero][persona]

## Función para agregar el pronombre
## Sigue la misma lógica que la función anterior

def pronombre(tiempo, numero, persona):
    return P[tiempo][numero][persona]

## Para generar la frase, sumo la función de pronombre y de conjugación + indico las precisiones de tiempo, nro y persona para cada caso

## 'Yo vivo'

pronombre('presente simple', 'singular', 'primera') + ' ' + conjuga(base, 'presente simple', 'singular', 'primera')

## 'Yo vivía'

pronombre('pasado experimentado', 'singular', 'primera') + ' ' + conjuga(base, 'pasado experimentado', 'singular', 'primera')
